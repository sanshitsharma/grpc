// Code generated by protoc-gen-go. DO NOT EDIT.
// source: counters.proto

package servicestatus

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CounterReq struct {
	ClientId             string   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CounterReq) Reset()         { *m = CounterReq{} }
func (m *CounterReq) String() string { return proto.CompactTextString(m) }
func (*CounterReq) ProtoMessage()    {}
func (*CounterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_counters_5c6eb42a25764a21, []int{0}
}
func (m *CounterReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CounterReq.Unmarshal(m, b)
}
func (m *CounterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CounterReq.Marshal(b, m, deterministic)
}
func (dst *CounterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CounterReq.Merge(dst, src)
}
func (m *CounterReq) XXX_Size() int {
	return xxx_messageInfo_CounterReq.Size(m)
}
func (m *CounterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CounterReq.DiscardUnknown(m)
}

var xxx_messageInfo_CounterReq proto.InternalMessageInfo

func (m *CounterReq) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type CounterResp struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Counter              int32    `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CounterResp) Reset()         { *m = CounterResp{} }
func (m *CounterResp) String() string { return proto.CompactTextString(m) }
func (*CounterResp) ProtoMessage()    {}
func (*CounterResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_counters_5c6eb42a25764a21, []int{1}
}
func (m *CounterResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CounterResp.Unmarshal(m, b)
}
func (m *CounterResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CounterResp.Marshal(b, m, deterministic)
}
func (dst *CounterResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CounterResp.Merge(dst, src)
}
func (m *CounterResp) XXX_Size() int {
	return xxx_messageInfo_CounterResp.Size(m)
}
func (m *CounterResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CounterResp.DiscardUnknown(m)
}

var xxx_messageInfo_CounterResp proto.InternalMessageInfo

func (m *CounterResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *CounterResp) GetCounter() int32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func init() {
	proto.RegisterType((*CounterReq)(nil), "servicestatus.CounterReq")
	proto.RegisterType((*CounterResp)(nil), "servicestatus.CounterResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StatusClient is the client API for Status service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatusClient interface {
	GetCounters(ctx context.Context, in *CounterReq, opts ...grpc.CallOption) (Status_GetCountersClient, error)
}

type statusClient struct {
	cc *grpc.ClientConn
}

func NewStatusClient(cc *grpc.ClientConn) StatusClient {
	return &statusClient{cc}
}

func (c *statusClient) GetCounters(ctx context.Context, in *CounterReq, opts ...grpc.CallOption) (Status_GetCountersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Status_serviceDesc.Streams[0], "/servicestatus.Status/GetCounters", opts...)
	if err != nil {
		return nil, err
	}
	x := &statusGetCountersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Status_GetCountersClient interface {
	Recv() (*CounterResp, error)
	grpc.ClientStream
}

type statusGetCountersClient struct {
	grpc.ClientStream
}

func (x *statusGetCountersClient) Recv() (*CounterResp, error) {
	m := new(CounterResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatusServer is the server API for Status service.
type StatusServer interface {
	GetCounters(*CounterReq, Status_GetCountersServer) error
}

func RegisterStatusServer(s *grpc.Server, srv StatusServer) {
	s.RegisterService(&_Status_serviceDesc, srv)
}

func _Status_GetCounters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CounterReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatusServer).GetCounters(m, &statusGetCountersServer{stream})
}

type Status_GetCountersServer interface {
	Send(*CounterResp) error
	grpc.ServerStream
}

type statusGetCountersServer struct {
	grpc.ServerStream
}

func (x *statusGetCountersServer) Send(m *CounterResp) error {
	return x.ServerStream.SendMsg(m)
}

var _Status_serviceDesc = grpc.ServiceDesc{
	ServiceName: "servicestatus.Status",
	HandlerType: (*StatusServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCounters",
			Handler:       _Status_GetCounters_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "counters.proto",
}

func init() { proto.RegisterFile("counters.proto", fileDescriptor_counters_5c6eb42a25764a21) }

var fileDescriptor_counters_5c6eb42a25764a21 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xce, 0x2f, 0xcd,
	0x2b, 0x49, 0x2d, 0x2a, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x2d, 0x2e, 0x49, 0x2c, 0x29, 0x2d, 0x96, 0x92, 0x49, 0xcf, 0xcf, 0x4f, 0xcf,
	0x49, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0xcc, 0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9, 0xcc, 0xcf,
	0x83, 0x2a, 0x56, 0xd2, 0xe4, 0xe2, 0x72, 0x86, 0x68, 0x0f, 0x4a, 0x2d, 0x14, 0x92, 0xe6, 0xe2,
	0x4c, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0x89, 0xcf, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c,
	0xe2, 0x80, 0x08, 0x78, 0xa6, 0x28, 0x99, 0x73, 0x71, 0xc3, 0x95, 0x16, 0x17, 0x08, 0xf1, 0x71,
	0x31, 0xe5, 0x67, 0x83, 0x15, 0x71, 0x04, 0x31, 0xe5, 0x67, 0x0b, 0x49, 0x70, 0xb1, 0x43, 0x1d,
	0x22, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x1a, 0x04, 0xe3, 0x1a, 0x05, 0x71, 0xb1, 0x05, 0x83, 0xdd,
	0x22, 0xe4, 0xc1, 0xc5, 0xed, 0x9e, 0x5a, 0x02, 0x35, 0xa5, 0x58, 0x48, 0x52, 0x0f, 0xc5, 0xa9,
	0x7a, 0x08, 0x97, 0x48, 0x49, 0xe1, 0x92, 0x2a, 0x2e, 0x50, 0x62, 0x30, 0x60, 0x4c, 0x62, 0x03,
	0x3b, 0xdf, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x62, 0x47, 0x68, 0xf1, 0xfd, 0x00, 0x00, 0x00,
}
